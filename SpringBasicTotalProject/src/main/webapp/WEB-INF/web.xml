<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <!-- 
         실무 
         1) web.xml 
            1. Framework 
               = Spring : DispatherServlet (전자 정보 프레임워크)
               = Struts : FilterDispatcher
               = 마이플랫폼 => 제우스 
            2. URL
         2) DataBase 
               = MyBatis(O)
                 = XML기반
                 = Annotation
               = Hibernate 
               = JPA
               = 사용자 정의 
         3) Controller 분석 
         =========================== Back-End 
         Front : JS
         p : HTML,CSS
                  기획
                  
         ==> SI => 장점 (다방면의 프로그램을 배운다), 단점(파견) => 수도권 , 지방 
             SM => 유지보수 (약간의 프로그램 구현) => 기능 추가 , 기능 수정 
                         솔루션 => 자체 개발 (전문성) 
                         프레임워크 => 위탁개발 (자체에 개발) 
            ==========================================================
            SI/SM => 80%
                       솔루션/SM => 15%
                       프레임워크 => 3%
                       운영  => 2%
                       
                       
            => src/main/java  ==> classpath
                 => 일반 자바 파일 
                 => VO , DAO , Model(@Controller) 
                 
            => webapp 
                 => 브라우저 출력 (HTML , JSP , CSS, JS)
            => WEB-INF
                 => 설정 (스프링 설정 파일 , 톰캣설정 파일)
                                       ====== web.xml
                                       
            스프링 : 라이브러리로 제작 (신뢰성 => 에러가 존재하지 않는다) => 통합 (표준화) 
                          형식동일(SQL)
             WHERE num BETWEEN 1 AND 10
             WHERE num>=1 AND num<=10
             
             1~100 => for (7), while (2), do~while (1)
      => Container / DI / AOP / MVC
        ============================ DataBase 설정 => p:driverClassName
          => Before : 메소드 시작전에 호출  
          => After : finally
          => Around : 위/아래  ===> AOP(제작하지 않는다 => Transaction)
          
          => MVC 
             => .do =======> DispatcherServlet ======> HandlerMapping 
                                                       @RequestMapping을 찾아서 메소드를 호출 
                                                          | Model
                                                                                                                결과값: ViewResolver
                                                           | Model => request
                                                          JSP   
                                                          ====
                                                                                                        값을 받을 수 있는 방법   (request,session)
                                                    => request는 한개의 JSP에서만 사용
                                                                                                             예외: 공유(include,forward)
                                                                                                             
                                                       => request.setAttribute("id","admin")
                                                       => model.addAttribute("id","admin")   
                                                       => request.getAttribute("id")=> 값읽기
                                                          => ${id} , ${requestScope.id}                                               
                                                    => session은 모든 JSP에서 사용이 가능 
                                                       (개인정보) => id,name    
                                                       =>  session.setAttribute("id","admin") 
                                                       => session.getAttribute("id")
                                                          ${sessionScope.id}   
                                                          => 생략이 가능      ${id}                                                                                        
     -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/config/application-*.xml</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
    <!-- 한글 변환 -->
    <filter>
	    <filter-name>encodingFilter</filter-name>
	    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	    <init-param>
	        <param-name>encoding</param-name>
	        <param-value>UTF-8</param-value>
	    </init-param>
	    <init-param>
	        <param-name>forceEncoding</param-name>
	        <param-value>true</param-value>
	    </init-param>
    </filter>
		
		<!-- /의 형식으로 시작하는 url에 대하여 UTF-8로 인코딩 -->
		<filter-mapping>
		    <filter-name>encodingFilter</filter-name>
		    <url-pattern>/*</url-pattern>
		</filter-mapping>
</web-app>
