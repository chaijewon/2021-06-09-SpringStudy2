<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <!-- Controller 등록 (Front Controller : 요청을 받는 클래스 , 응답하는 역할) -->
    <!-- 
          Spring MVC (Controller => DispatcherServlet) => 연결 
          web.xml,application-context.xml , application-datasource.xml
          1) 주의점 (스프링=> XML 처음으로 읽는다 => 오류 (500) => XML
          2) Mapper => 오류(500)
          3) XML 
             ==== 문법 처리 
                  1. 대소문자 구분 
                  2. 없는 속성이 있는 경우 바로 에러 
                  3. 여는 태그와 닫는 태그가 명확하다 (VueJS(XML=(X)) , React => XML)
                  4. 속성값 => ""
                  5. Spring / Mybatis => XML (형식을 준다 : DTD) => Tiles , 라이브러리 (pom.xml)
                     => 단점 (오류위치 찾기가 어렵다)
                     
          => 웹 
                          웹서버(톰캣)가 동작 (서버 => 브라우저로 전송) 
             
             웹서버 : 아파치 / IIS  
             웹컨테이너 : 톰캣, 레진  (JSP를 HTML로 변경)
                ==== (테스트용  웹서버)  
      ==================== 서버 
             브라우저  (JSP가 실행되는 것이 아니라 ==> JSP를 HTML로 변환되면 실행)
              JSP => 브라우저 안에서는 일반 텍스트
      ==================== 클라이언트 
      
            구동시에 가장 먼저 읽는 파일 : web.xml
            브라우저는 실행할 수 있는 파일 : HTML , XML , JSON 
             
     -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
		  <param-name>contextConfigLocation</param-name>
		  <param-value>/WEB-INF/config/application-*.xml</param-value>
		</init-param>
	</servlet>
	<!-- 
	    자동으로 읽어가는 XML파일 
	    WEB-INF/<servlet-name>-servlet.xml
	    
	    <servlet-name>appServlet</servlet-name>
	     => appServlet-servlet.xml
	    <servlet-name>dispatcher</servlet-name>
	     => dispatcher-servlet.xml
	     
	     => xml파일을 나눠서 작업 => 폴더 => 지정 
	 -->
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	
	<!-- 한글 변환 -->
	<!-- request를 사용하지 않는 경우에 자동으로 한글변환
	     Spring : 예전버전 => request를 매개변수로 받아서 처리 
	          최근버전 : DispatcherServlet 직접전송 
	     id,password
	     public String login(HttpServletRequest request,HttpServletResponse response)
	     {
	          String id=request.getParameter("id");
	          String pwd=request.getParameter("pwd");
	     }
	     public String login(String id,String pwd) => DispatcherServlet
	     {
	        
	     }
	     => @RequestMapping (GET/POST 동시에 처리가 가능)
	         = @GetMapping() (GET)
	         = @PostMapping() (POST)
	     => 1. 간결하게 만든다 
	     => 2. 다른 개발자가 쉽게 적용할 수 있게 만든다 
	     => 3. 모든 개발자가 동일한 코딩 (표준화)
	     => 4. 목적:결합성이 낮은 프로그램 (다른 클래스에 영향이 없는 클래스)
	 -->
	<!--  
	   요청값을 받는 경우 : request
	                 =======
	                 특별한 경우가 아니면 request를 사용하지 않고 매개변수 이용 
	        ========= Cookie
	 -->
	<filter>
	    <filter-name>encodingFilter</filter-name>
	    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	    <init-param>
	        <param-name>encoding</param-name>
	        <param-value>UTF-8</param-value>
	    </init-param>
	    <init-param>
	        <param-name>forceEncoding</param-name>
	        <param-value>true</param-value>
	    </init-param>
		</filter>
		
		<!-- /의 형식으로 시작하는 url에 대하여 UTF-8로 인코딩 -->
		<filter-mapping>
		    <filter-name>encodingFilter</filter-name>
		    <url-pattern>/*</url-pattern>
		</filter-mapping>
    <!-- 에러 코드  -->
</web-app>
